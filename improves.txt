### Backend Improvements

1.  **Refactor to a Service-Oriented Architecture**:
    *   Create a dedicated `TicketService` to handle all business logic related to tickets (creation, validation, etc.), separating concerns from the `TicketController`.
    *   The controller should only be responsible for handling HTTP requests and responses, delegating all logic to the service layer.

2.  **Implement Robust Error Handling**:
    *   Use `@ControllerAdvice` to create a global exception handler for common errors (e.g., `TicketNotFoundException`).
    *   Return consistent and informative JSON error responses to the client.

3.  **Add Unit and Integration Tests**:
    *   Write unit tests for the `TicketService` to ensure the business logic is correct.
    *   Write integration tests for the `TicketController` to verify the API endpoints are working as expected.

4.  **Secure the Application**:
    *   Add Spring Security to the project.
    *   Implement basic authentication to protect the ticket creation endpoint.
    *   Configure CORS to restrict access to the API from unauthorized domains.

5.  **Improve Database Operations**:
    *   Use Spring Data JPA's derived query methods in the `TicketRepository` to simplify data access.
    *   Add custom queries with `@Query` for more complex database operations.

### Frontend Improvements (Basic)

1.  **Enhance User Feedback**:
    *   Use JavaScript to show a loading spinner while the PDF is being generated.
    *   Display a clear success or error message to the user after the form submission.

2.  **Improve Form Usability**:
    *   Set sensible default values for form fields (e.g., the current date for the departure date).
    *   Add client-side validation with HTML5 attributes (`required`, `pattern`, etc.) for instant feedback.
